---
# PLUGINS
# ===
# See config/plugins/all.vim for plugin mappings and config/plugins/*.vim

# Startup
# -------
- repo: Shougo/dein.vim
- repo: thinca/vim-localrc
- { repo: rafi/awesome-vim-colorschemes, merged: 0 }
- { repo: folke/lsp-colors.nvim, if: has("nvim-0.5") }

- { repo: nvim-lua/plenary.nvim, if: has("nvim-0.5") }
- { repo: nvim-lua/popup.nvim, if: has("nvim-0.5") }
- { repo: kyazdani42/nvim-web-devicons, if: has("nvim-0.5") }

- repo: sgur/vim-editorconfig
  hook_add: |-
    let g:editorconfig_verbose = 1
    let g:editorconfig_blacklist = {
      \ 'filetype': [
      \   'git.*', 'fugitive', 'help', 'defx', 'denite.*', 'startify',
      \   'vista.*', 'tagbar', 'lsp-.*', 'clap_.*', 'any-jump', 'gina-.*',
      \   'lsp-*'
      \  ],
      \ 'pattern': ['\.un~$']
      \ }

# Improve CursorHold performance
# See: https://github.com/neovim/neovim/issues/12587
# - { repo: antoinemadec/FixCursorHold.nvim, if: "has('nvim')" }

- repo: christoomey/vim-tmux-navigator
  if: "! (has('win32') || has('win64'))"

- repo: tpope/vim-sleuth
  hook_add: let g:sleuth_neighbor_limit = 5

# Lazy Loading
# ==========================================

# ==========================================
# Commands
# --------

- { repo: mbbill/undotree, on_cmd: UndotreeToggle }
- { repo: jreybert/vimagit, on_cmd: Magit }
- { repo: tweekmonster/helpful.vim, on_cmd: HelpfulVersion }
- { repo: lambdalisue/suda.vim, on_event: BufRead }

- repo: tyru/caw.vim
  on_map: { nx: <Plug> }
  hook_add: |-
    let g:caw_no_default_keymappings = 1
    let g:caw_operator_keymappings = 0

- repo: lambdalisue/gina.vim
  on_cmd: Gina
  on_ft: [ gitcommit, gitrebase ]
  # on_event: FileType
  hook_source: source $VIM_PATH/config/plugins/gina.vim

- repo: rstacruz/vim-gitgrep
  on_cmd: GG
  on_func: gitgrep#run

- repo: tversteeg/registers.nvim
  on_cmd: Registers
  on_map: { i: '<C-r>', n: '"' }

- repo: pechorin/any-jump.vim
  on_cmd: [ AnyJump, AnyJumpVisual ]
  hook_add: |-
    let g:any_jump_disable_default_keybindings = 1
    autocmd user_events FileType any-jump setlocal cursorline

- repo: kana/vim-niceblock
  on_map: { x: <Plug> }
  hook_add: let g:niceblock_no_default_key_mappings = 0

- repo: t9md/vim-choosewin
  on_map: { n: <Plug> }
  hook_add: |-
    let g:choosewin_label = 'ADFGHJKLUIOPQWERT'
    let g:choosewin_label_padding = 5

- repo: mzlogin/vim-markdown-toc
  on_cmd: [ GenTocGFM, GenTocRedcarpet, GenTocGitLab, UpdateToc ]
  hook_add: let g:vmt_auto_update_on_save = 0

- repo: Ron89/thesaurus_query.vim
  on_cmd:
    - Thesaurus
    - ThesaurusQueryReplaceCurrentWord
    - ThesaurusQueryLookupCurrentWord
  hook_add: |-
    let g:tq_map_keys = 0
    let g:tq_use_vim_autocomplete = 0

# ==========================================
# Interface
# ---------
- { repo: itchyny/vim-gitbranch, on_event: FileType }
- { repo: romainl/vim-cool, on_event: [ CursorMoved, InsertEnter ]}
- { repo: haya14busa/vim-asterisk, on_map: { nv: <Plug> }}
- { repo: rhysd/accelerated-jk, on_map: { n: <Plug> }, if: $SUDO_USER == '' }
- { repo: haya14busa/vim-edgemotion, on_map: { nv: <Plug> }}
- { repo: t9md/vim-quickhl, on_map: { nv: <Plug> }}
- { repo: rafi/vim-sidemenu, on_map: { nv: <Plug> }}

- repo: itchyny/vim-cursorword
  on_event: FileType
  hook_add: let g:cursorword = 0
  hook_source: |-
    augroup user_plugin_cursorword
      autocmd!
      autocmd FileType json,yaml,markdown,nginx,dosini,conf
        \ let b:cursorword = 1
      autocmd WinEnter * if &diff || &pvw | let b:cursorword = 0 | endif
      autocmd InsertEnter * if get(b:, 'cursorword', 0) == 1
        \| let b:cursorword = 0
        \| endif
      autocmd InsertLeave * if get(b:, 'cursorword', 1) == 0
        \| let b:cursorword = 1
        \| endif
    augroup END

- repo: airblade/vim-gitgutter
  on_event: FileType
  hook_add: |-
    let g:gitgutter_map_keys = 0
    let g:gitgutter_sign_added = '▎'
    let g:gitgutter_sign_modified = '▎'
    let g:gitgutter_sign_removed = '▍'
    let g:gitgutter_sign_removed_first_line = '▘'
    let g:gitgutter_sign_removed_above_and_below = '_¯'
    let g:gitgutter_sign_modified_removed = '▍'
    let g:gitgutter_preview_win_floating = 1
    let g:gitgutter_sign_allow_clobber = 0
    let g:gitgutter_sign_priority = 0
    let g:gitgutter_override_sign_column_highlight = 0

- repo: kshenoy/vim-signature
  depends: vim-gitgutter
  on_event: FileType
  hook_add: |-
    let g:SignatureForceRemoveGlobal = 0
    let g:SignatureUnconditionallyRecycleMarks = 1
    let g:SignatureErrorIfNoAvailableMarks = 0
    let g:SignaturePurgeConfirmation = 0
    let g:SignatureMarkTextHLDynamic = 1
    let g:SignatureMarkerTextHLDynamic = 1
    let g:SignatureIncludeMarkers = repeat('⚐', 10)
    autocmd user_events User GitGutter call signature#sign#Refresh()

- repo: nathanaelkane/vim-indent-guides
  on_event: FileType
  hook_source: |-
    let g:indent_guides_enable_on_vim_startup = 0
    let g:indent_guides_default_mapping = 0
    let g:indent_guides_tab_guides = 0
    let g:indent_guides_color_change_percent = 3
    let g:indent_guides_guide_size = 1
    let g:indent_guides_exclude_filetypes = [
      \ 'help', 'man', 'fern', 'defx', 'denite', 'denite-filter', 'startify',
      \ 'vista', 'vista_kind', 'tagbar', 'lsp-hover', 'clap_input', 'fzf',
      \ 'any-jump', 'gina-status', 'gina-commit', 'gina-log', 'minimap',
      \ 'quickpick-filter', 'lsp-quickpick-filter', 'lspinfo'
      \ ]
    augroup user_plugin_indentguides
      autocmd!
      autocmd BufEnter *
      \ if ! empty(&l:filetype) && empty(&buftype)
      \|   if g:indent_guides_autocmds_enabled == 0 && &l:expandtab
      \|     IndentGuidesEnable
      \|   elseif g:indent_guides_autocmds_enabled == 1 && ! &l:expandtab
      \|     IndentGuidesDisable
      \|   endif
      \| endif
    augroup END
    autocmd user_events FileType * ++once IndentGuidesEnable

- repo: romainl/vim-qf
  on_ft: qf
  on_event: QuickFixCmdPost
  on_map: { n: <Plug> }
  hook_post_source: |-
    augroup qf
      autocmd!
    augroup END
  hook_add: |-
    " let g:loaded_qf = 1"
    let g:qf_bufname_or_text = 1
    let g:qf_auto_open_quickfix = 0
    let g:qf_auto_open_loclist = 0
    let g:qf_auto_quit = 0
    let g:qf_auto_resize = 0
    autocmd User preview_open_pre
      \  let g:vim_markdown_no_default_key_mappings = 1
      \| let g:vim_markdown_emphasis_multiline = 0
    autocmd User preview_open_post
      \  unlet! g:vim_markdown_no_default_key_mappings
      \| unlet! g:vim_markdown_emphasis_multiline

# - repo: rhysd/committia.vim
#   on_event: [ BufReadPre, BufReadPost ]
#   hook_source: let g:committia_min_window_width = 70

- repo: itchyny/calendar.vim
  on_cmd: Calendar
  hook_source: |-
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1

- repo: deris/vim-shot-f
  on_map: { nxo: <Plug> }
  hook_add: let g:shot_f_no_default_key_mappings = 1

- repo: vimwiki/vimwiki
  on_map: { n: <Plug> }
  on_cmd: [ VimwikiIndex, VimwikiUISelect ]
  hook_add: |-
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
  hook_source: |-
    let g:vimwiki_list = [
    \   { 'diary_header': 'Diary',
    \     'diary_link_fmt': '%Y-%m/%d',
    \     'auto_toc': 1,
    \     'path': '~/docs/wiki/',
    \     'syntax': 'markdown',
    \     'ext': '.md' },
    \   { 'path': '~/docs/books/',
    \     'syntax': 'markdown',
    \     'ext': '.md' }
    \ ]

- repo: norcalli/nvim-colorizer.lua
  if: has('nvim-0.4')
  on_event: FileType
  hook_post_source: lua require('plugins.colorizer')

# ==========================================
# Completion and code analysis
# ----------

- { repo: kabouzeid/nvim-lspinstall, if: has('nvim-0.5') }

- repo: neovim/nvim-lspconfig
  if: has('nvim-0.5')
  depends: [ lsp_signature.nvim, todo-comments.nvim ]
  on_event: VimEnter
  hook_post_source: lua require('plugins.lspconfig')

- repo: ray-x/lsp_signature.nvim
  if: has('nvim-0.5')
  lazy: true
  hook_post_source: lua require('plugins.lsp_signature')

- repo: folke/todo-comments.nvim
  if: has("nvim-0.5")
  lazy: true
  hook_post_source: lua require('plugins.todo-comments')

- repo: hrsh7th/nvim-compe
  if: has('nvim-0.5')
  on_event: InsertEnter
  # depends: compe-tmux
  hook_post_source: lua require('plugins.compe')
  hook_source: |-
    augroup user_plugin_compe
      autocmd!
      autocmd FileType denite-filter,clap_input
        \ call compe#setup({'enabled': v:false}, 0)
    augroup END

# - { repo: andersevenrud/compe-tmux, if: has("nvim-0.5"), lazy: true }

- repo: hrsh7th/vim-vsnip
  depends: [ vim-vsnip-integ, friendly-snippets ]
  on_event: InsertEnter
  hook_post_source: |-
    let g:vsnip_filetypes = {}
    let g:vsnip_filetypes.javascriptreact = ['javascript']
    let g:vsnip_filetypes.typescriptreact = ['typescript']

- { repo: hrsh7th/vim-vsnip-integ, lazy: true }
- { repo: rafamadriz/friendly-snippets, lazy: true, merged: 0 }

- repo: folke/trouble.nvim
  if: has("nvim-0.5")
  on_cmd: [ Trouble, TroubleToggle ]

- { repo: sindrets/diffview.nvim, if: has('nvim-0.5'), on_cmd: DiffviewOpen }

- repo: nvim-telescope/telescope.nvim
  if: has("nvim-0.5")
  depends: [ todo-comments.nvim, session-lens ]
  on_cmd: Telescope
  hook_post_source: lua require('plugins.telescope')

- { repo: rmagatti/session-lens, if: has("nvim-0.5"), lazy: true }

- repo: simrat39/symbols-outline.nvim
  if: has("nvim-0.5")
  on_cmd: SymbolsOutline, SymbolsOutlineOpen
  hook_source: lua require('plugins.symbols-outline')

- repo: rmagatti/auto-session
  if: has("nvim-0.5")
  on_event: VimEnter
  hook_post_source: lua require('plugins.auto-session')

- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft: [ html, css, vue, javascript, javascriptreact, svelte ]
  hook_source: |-
    let g:user_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: Raimondi/delimitMate
  on_event: FileType
  hook_source: |-
    let g:delimitMate_expand_cr = 0
    let g:delimitMate_expand_space = 1
    let g:delimitMate_smart_quotes = 1
    let g:delimitMate_expand_inside_quotes = 0
    let g:delimitMate_excluded_ft =
      \ 'mail,denite-filter,clap_input,gitrebase,lsp-quickpick-filter'
    augroup user_plugin_delimitMate
      au!
      au FileType html let b:delimitMate_matchpairs = "(:),[:],{:}"
      au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
      au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
      au FileType tex let b:delimitMate_quotes = ""
      au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
    augroup END

# ==========================================
# Fern
# ------
- repo: lambdalisue/fern.vim
  on_cmd: Fern
  hook_source: source $VIM_PATH/config/plugins/fern.vim

- repo: lambdalisue/nerdfont.vim  # lazy by nature

- repo: lambdalisue/fern-git-status.vim
  on_source: fern.vim
  hook_add: let g:fern_git_status_disable_startup = 1
  hook_source: call fern_git_status#init()

- { repo: lambdalisue/fern-mapping-git.vim, on_source: fern.vim }
- { repo: lambdalisue/fern-bookmark.vim, on_source: fern.vim }

- repo: lambdalisue/fern-renderer-nerdfont.vim
  on_source: fern.vim
  hook_source: |-
    let g:fern#renderer = "nerdfont"
    let g:fern#renderer#nerdfont#padding = get(g:, 'global_symbol_padding', ' ')

- repo: lambdalisue/glyph-palette.vim
  on_source: fern.vim
  hook_source: autocmd user_events FileType fern call glyph_palette#apply()

# ==========================================
# Syntax
# ---------

- repo: nvim-treesitter/nvim-treesitter
  if: has("nvim-0.5")
  on_event: FileType
  on_cmd: [ TSUpdate, TSInstall, TSInstallInfo, TSModuleInfo, TSConfigInfo ]
  hook_post_update: ':TSUpdate'
  hook_source: lua require('plugins.treesitter')

- repo: nvim-treesitter/nvim-treesitter-textobjects
  if: has("nvim-0.5")
  depends: nvim-treesitter
  on_event: FileType
  hook_source: lua require('plugins.textobjects')

- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_add: |-
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_strikethrough = 1
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_conceal = 1
    let g:vim_markdown_conceal_code_blocks = 1
    let g:vim_markdown_new_list_item_indent = 0
    let g:vim_markdown_toc_autofit = 0
    let g:vim_markdown_follow_anchor = 0
    let g:vim_markdown_no_extensions_in_markdown = 1
    let g:vim_markdown_edit_url_in = 'vsplit'
    let g:vim_markdown_fenced_languages = [
      \ 'c++=cpp',
      \ 'viml=vim',
      \ 'bash=sh',
      \ 'ini=dosini',
      \ 'js=javascript',
      \ 'json=javascript',
      \ 'jsx=javascriptreact',
      \ 'tsx=typescriptreact',
      \ 'docker=Dockerfile',
      \ 'makefile=make',
      \ 'py=python'
      \ ]

# ==========================================
# Operators and text objects
# ---------
- repo: machakann/vim-sandwich
  on_map: { vonx: <Plug>(operator-sandwich- }
  hook_add: |-
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    let g:textobj_sandwich_no_default_key_mappings = 1

- { repo: AndrewRadev/sideways.vim, rev: main, on_map: { onx: <Plug>Sideways }}
- { repo: AndrewRadev/linediff.vim, on_cmd: Linediff }

- repo: AndrewRadev/splitjoin.vim
  rev: main
  on_map: { n: <Plug>Splitjoin }
  hook_add: |-
    let g:splitjoin_join_mapping = ''
    let g:splitjoin_split_mapping = ''
    autocmd user_events FileType go let b:splitjoin_trailing_comma = 1

- repo: AndrewRadev/dsf.vim
  on_map: { n: <Plug>Dsf }
  hook_add: let g:dsf_no_mappings = 1

#  vim: set ts=2 sw=2 tw=80 et :
