---
# PLUGINS
# ==========================================

# - repo: lambdalisue/gina.vim
#   on_cmd: Gina
#   hook_post_source: source $VIM_PATH/config/local.plugins/gina.vim

# Startup
# -------

# Lazy Loading
# ==========================================

# Languages
# ---------

# debugging
# - repo: sakhnik/nvim-gdb
#   on_cmd: [ GdbStart, GdbStartLLDB, GdbStartPD, GdbStartBashDB ]
#   hook_post_source: |
#     call dein#remote_plugins()

# markdown
# - repo: thecontinium/vim-markdown-composer
#   if: empty($VIM_MINIMAL) && executable('cargo')
#   on_ft: markdown
#   hook_source: |
#     let g:markdown_composer_browser = 'open -a Firefox'
#     let g:markdown_composer_autostart = 0
#   hook_post_update: |
#     call dein#util#_notify("Building: " . g:dein#plugin["name"] )
#     if has('nvim')
#       call system("cargo build --release")
#     else
#       call system("cargo build --release --no-default-features --features json-rpc")
#     endif
#
# - { repo: itspriddle/vim-marked, on_ft: markdown }
- repo: vimwiki/vimwiki
  on_map: { n: <Plug> }
  on_cmd: [ VimwikiIndex, VimwikiUISelect ]
  hook_add: |
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
  hook_source: |
    let g:vimwiki_listsyms = ' .oOx'
    let g:vimwiki_list = [
    \   { 'diary_header': 'Diary',
    \     'diary_link_fmt': '%Y-%m/%d',
    \     'auto_toc': 1,
    \     'path': '~/Library/Mobile\ Documents/9CR7T2DMDG~com~ngocluu~onewriter/Documents/notesy/',
    \     'syntax': 'markdown',
    \     'ext': '.mmd' },
    \   { 'path': '~/Library/Mobile\ Documents/9CR7T2DMDG~com~ngocluu~onewriter/Documents/wiki/',
    \     'syntax': 'markdown',
    \     'ext': '.mmd' }
    \ ]

# - repo: junegunn/fzf
#   build: ./install --all
#   merged: 0
#
# - repo: junegunn/fzf.vim
#   depends: fzf
#
# - repo: alok/notational-fzf-vim
#   depends: fzf.vim
#   hook_source: |
#     let g:nv_search_paths = ['~/Dropbox//notesy']
#     let g:nv_default_extension = '.mmd'

# fennel
- repo: 'bakpakin/fennel.vim'

# clojure
- repo: guns/vim-sexp
  on_event: InsertCharPre
  on_ft: clojure

- repo: tpope/vim-sexp-mappings-for-regular-people
  on_event: InsertCharPre
  on_ft: clojure
  depends: vim-sexp

- repo: gberenfield/cljfold.vim
  on_ft: clojure

- repo: tpope/vim-repeat
  on-source: conjure

# - repo: clojure-vim/vim-jack-in
#   on_cmd: [Clj, Lein]
# - repo: tpope/vim-dispatch
#   on_source: vim-jack-in
# - repo: radenling/vim-dispatch-neovim
#   on_source: vim-dispatch

- repo: Olical/conjure
  rev: "*"
  on_ft: clojure
  hook_add:  source $VIM_PATH/config/local.plugins/conjure.vim

#
# fennel.fnl syntax
# - repo: 'bakpakin/fennel.vim'

- repo: Raimondi/delimitMate
  on_event: InsertEnter
  hook_source: |
    let g:delimitMate_expand_cr = 1
    let g:delimitMate_excluded_ft = 'html,clojure'
    let g:neomake_virtualtext_current_error = 0

- repo: thecontinium/snippets
  depends: ultisnips
  on_event: FileType
  if: has('python3')
  merged: 0

# - repo: dense-analysis/ale
#   on_event: FileType
#   hook_add: |
#     let g:ale_disable_lsp = 0
#     let g:ale_echo_delay = 100
#     let g:ale_lint_delay = 1000
#     let g:ale_echo_msg_format = '%linter%: %code: %%s [%severity%]'
#     let g:ale_history_enabled = 0
#     let g:ale_sign_error = '✖'
#     let g:ale_sign_warning = 'ⁱ'
#     let g:ale_maximum_file_size = 500000
#     let g:lsp_diagnostics_enabled = 0

# - repo: Vigemus/iron.nvim
#   if: has('nvim')
#   on_cmd: [ IronRepl, IronReplHere, IronFocus, IronSend, IronWatchCurrentFile ]
#   on_map: { nv: <Plug> }
#   on_func: IronUnwatchFile
#   hook_add: let g:iron_map_defaults = 0 | let g:iron_map_extended = 0
#   hook_source: |
#     lua << EOF
#     \ local iron = require('iron')
#     \
#     \ iron.core.set_config {
#     \   preferred = {
#     \     clojure= 'lein'
#     \     python = 'ipython'
#     \   }
#     \ }
#     \
#     \ EOF
#
# - { repo: tpope/vim-fireplace, on_ft: clojure }
# - { repo: tpope/vim-projectionist, on_ft: clojure }
# - { repo: tpope/vim-salve, on_ft: clojure }
# - repo: clojure-vim/async-clj-omni
#   on_ft: clojure
#   hook_source: |
#     call deoplete#custom#option('keyword_patterns', {
#     \ 'clojure': '[\w!$%&*+/:<=>?@\^_~\-\.#]*',
#     \}
# c#
#- repo: OmniSharp/omnisharp-vim
#  on_ft: cs
#  hook_post_source: |
#    let g:OmniSharp_server_stdio = 1
#    call deoplete#custom#option('sources', {
#    \ 'cs': ['omnisharp'],
#    \ })


# ==========================================
# Commands
# --------
# ==========================================
# - repo: Shougo/defx.nvim
#   on_cmd: Defx
#   hook_source: source $VIM_PATH/config/local.plugins/defx.vim

- repo: reedes/vim-wordy
  on_cmd: [ Wordy, NoWordy, NextWordy ]
  hook_add: |-
    let g:wordy_spell_dir = $DATA_PATH . '/wordy'
    set runtimepath+=g:wordy_spell_dir

# - repo: thecontinium/vim-which-key
#   on_cmd: WhichKey
#   hook_add: |
#     let g:which_key_map =  {}
#   hook_source: |
#     call which_key#register('', "g:which_key_map")

# Interface
# ---------
# - repo: RRethy/vim-hexokinase
#   on_ft: [ css, scss, sass, stylus, vim ]
#   build: make hexokinase
#   hook_add: |
#     let g:Hexokinase_ftAutoload = [ 'css', 'scss', 'sass', 'stylus' ]

# - repo: thecontinium/vim-shortcut
#   on_cmd: [ Shortcut!, Shortcut, ShortcutsRangeless,ShortcutsRangeless! ]
#   hook_source: |
#     let g:shortcut_expand_leader_keys = 0
#
# - repo: easymotion/vim-easymotion
#   on_map: { n: <Plug> }
#   hook_source: |
#     let g:EasyMotion_do_mapping = 0
#     let g:EasyMotion_prompt = 'Jump to → '
#     let g:EasyMotion_keys = 'fjdksweoavn'
#     let g:EasyMotion_smartcase = 1
#     let g:EasyMotion_use_smartsign_us = 1

# ==========================================
# Completion and code analysis
# ----------

- repo: thecontinium/asyncomplete-conjure.vim
  on_source: asyncomplete.vim
  hook_source: |
    autocmd User asyncomplete_setup call asyncomplete#register_source(
      \ asyncomplete#sources#conjure#get_source_options({
      \ 'name': 'conjure',
      \ 'allowlist': ['clojure'],
      \ 'completor': function('asyncomplete#sources#conjure#completor'),
      \ }))

- repo: prabirshrestha/asyncomplete-buffer.vim
  if: 0

- repo: thecontinium/asyncomplete-buffer.vim
  on_source: asyncomplete.vim
  hook_source: |
    autocmd User asyncomplete_setup call asyncomplete#register_source(
      \ asyncomplete#sources#buffer#get_source_options({
      \ 'name': 'buffer',
      \ 'allowlist': ['*'],
      \ 'blocklist': ['go', 'denite', 'denite-filter', 'clap_input'],
      \ 'completor': function('asyncomplete#sources#buffer#completor'),
      \ 'config': {
      \    'max_buffer_size': 5000000,
      \  },
      \ }))
  hook_add: |
    let g:asyncomplete_buffer_clear_cache = 0
    let g:asyncomplete_buffer_identify_words_regex = '\k\+'

- repo: htlsne/asyncomplete-look
  on_source: asyncomplete.vim
  hook_source: |
   au User asyncomplete_setup call asyncomplete#register_source({
      \ 'name': 'look',
      \ 'allowlist': ['text', 'markdown'],
      \ 'completor': function('asyncomplete#sources#look#completor'),
      \ })
   au User asyncomplete_setup call asyncomplete#register_source({
      \ 'name': 'look_good_words',
      \ 'allowlist': ['text', 'markdown'],
      \ 'completor': function('asyncomplete#sources#look#good_words'),
      \ })

# Only NeoVim ------------------------------
# ==========================================
# Denite
# ------
- repo: Shougo/denite.nvim
  on_cmd: Denite
  trusted: 1
  hook_source: source $VIM_PATH/config/local.plugins/denite.vim

  # add gina to the ignore pattern setup in the autoload
# - repo: Shougo/neomru.vim
#   on_source: denite.nvim
#   hook_add: |
#     let g:neomru#directory_mru_path = $DATA_PATH . '/mru/dir'
#     let g:neomru#file_mru_path = $DATA_PATH . '/mru/file'
#     let g:unite_source_file_mru_limit = 5000
#     let g:neomru#file_mru_ignore_pattern =
#           \'\~$\|\.\%(o\|exe\|dll\|bak\|zwc\|pyc\|sw[po]\)$'.
#           \'\|\%(^\|/\)\.\%(hg\|git\|bzr\|svn\)\%($\|/\)'.
#           \'\|^\%(\\\\\|/mnt/\|/media/\|/temp/\|/tmp/\|\%(/private\)\=/var/folders/\)'.
#           \'\|\%(^\%(fugitive\)://\)'.
#           \'\|\%(^\%(gina\)://\)'.
#           \'\|\%(^\%(term\)://\)'

- { repo: thecontinium/vim-denite-sorter-lastmod }

# ==========================================
# Operators
# ---------

# ==========================================
# Text objects
# ------------

#  vim: set ts=2 sw=2 tw=80 et :
