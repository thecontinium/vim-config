---
# PLUGINS
# ==========================================

- { repo: thecontinium/vim-denite-sorter-lastmod }
- { repo: rafi/vim-denite-session, if: 0 }
- { repo: thecontinium/vim-denite-session, on_source: denite.nvim }

# Startup
# -------

# Lazy Loading
# ==========================================

# Languages
# ---------

# debugging
- repo: sakhnik/nvim-gdb
  on_cmd: [ GdbStart, GdbStartLLDB, GdbStartPD, GdbStartBashDB ]
  hook_post_source: |
    call dein#remote_plugins()

# markdown
# - repo: thecontinium/vim-markdown-composer
#   if: empty($VIM_MINIMAL) && executable('cargo')
#   on_ft: markdown
#   hook_source: |
#     let g:markdown_composer_browser = 'open -a Firefox'
#     let g:markdown_composer_autostart = 0
#   hook_post_update: |
#     call dein#util#_notify("Building: " . g:dein#plugin["name"] )
#     if has('nvim')
#       call system("cargo build --release")
#     else
#       call system("cargo build --release --no-default-features --features json-rpc")
#     endif
#
# - { repo: itspriddle/vim-marked, on_ft: markdown }
- repo: vimwiki/vimwiki
  on_map: { n: <Plug> }
  on_cmd: [ VimwikiIndex, VimwikiUISelect ]
  hook_add: |
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
  hook_source: |
    let g:vimwiki_listsyms = ' .oOx'
    let g:vimwiki_list = [
    \   { 'diary_header': 'Diary',
    \     'diary_link_fmt': '%Y-%m/%d',
    \     'auto_toc': 1,
    \     'path': '~/Library/Mobile\ Documents/9CR7T2DMDG~com~ngocluu~onewriter/Documents/notesy/',
    \     'syntax': 'markdown',
    \     'ext': '.mmd' },
    \   { 'path': '~/Library/Mobile\ Documents/9CR7T2DMDG~com~ngocluu~onewriter/Documents/wiki/',
    \     'syntax': 'markdown',
    \     'ext': '.mmd' }
    \ ]


# - repo: junegunn/fzf
#   build: ./install --all
#   merged: 0
#
# - repo: junegunn/fzf.vim
#   depends: fzf
#
# - repo: alok/notational-fzf-vim
#   depends: fzf.vim
#   hook_source: |
#     let g:nv_search_paths = ['~/Dropbox//notesy']
#     let g:nv_default_extension = '.mmd'

# clojure
- repo: guns/vim-sexp
  on_event: InsertCharPre
  on_ft: clojure
  depends: neosnippet.vim

- repo: tpope/vim-sexp-mappings-for-regular-people
  on_event: InsertCharPre
  on_ft: clojure
  depends: vim-sexp

- repo: Olical/conjure
  rev: v2.*.*
  build: bin/compile
  on_ft: clojure
  hook_add: |
    let g:dein#install_process_timeout = 600
  hook_source: |
    let g:conjure_map_prefix = ","
    let g:conjure_log_direction = "vertical"
    let g:conjure_log_blacklist = ["ret", "retg:conjure_log_auto_close-multiline", "load-file", "eval"]
    let g:conjure_log_auto_close = "v:false"
  e hook_post_source: |
    call deoplete#custom#option('keyword_patterns', {
    \ 'clojure': '[\w!$%&*+/:<=>?@\^_~\-\.#]*',
    \})

- repo: Raimondi/delimitMate
  on_event: InsertEnter
  hook_source: |
    let g:delimitMate_expand_cr = 1
    let g:delimitMate_excluded_ft = 'html,clojure'
    let g:neomake_virtualtext_current_error = 0

# - { repo: tpope/vim-fireplace, on_ft: clojure }
# - { repo: tpope/vim-projectionist, on_ft: clojure }
# - { repo: tpope/vim-salve, on_ft: clojure }
# - repo: clojure-vim/async-clj-omni
#   on_ft: clojure
#   hook_source: |
#     call deoplete#custom#option('keyword_patterns', {
#     \ 'clojure': '[\w!$%&*+/:<=>?@\^_~\-\.#]*',
#     \}
# c#
- repo: OmniSharp/omnisharp-vim
  on_ft: cs
  hook_post_source: |
    let g:OmniSharp_server_stdio = 1
    call deoplete#custom#option('sources', {
    \ 'cs': ['omnisharp'],
    \ })


# ==========================================
# Commands
# --------
# ==========================================
# Interface
# ---------
- repo: RRethy/vim-hexokinase
  on_ft: [ css, scss, sass, stylus, vim ]
  build: make hexokinase
  hook_add: |
    let g:Hexokinase_ftAutoload = [ 'css', 'scss', 'sass', 'stylus' ]

- repo: sunaku/vim-shortcut
  on_cmd: [ Shortcut!, Shortcut]

# ==========================================
# Completion
# ----------
- repo: Shougo/neosnippet.vim
  depends: [ neosnippet-snippets, context_filetype.vim ]
  on_event: InsertCharPre
  on_ft: snippet
  hook_add: let g:neosnippet#data_directory = $DATA_PATH . '/snippets'
  hook_source: |
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#enable_complete_done = 1
    let g:neosnippet#expand_word_boundary = 1
    let g:neosnippet#enable_auto_clear_markers = 1

# Only NeoVim ------------------------------
# ==========================================
# Denite
# ------
# ==========================================
# Operators
# ---------

# ==========================================
# Text objects
# ------------

#  vim: set ts=2 sw=2 tw=80 et :
